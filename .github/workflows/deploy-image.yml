name: Deploy image to Kubernetes

on:
  # trigger manually
  workflow_dispatch:
    inputs:
      env:
        description: "Environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - prod
      version:
        description: "version"
        required: true
        type: string

env:
  PROJECT_ID: "${{ secrets.PROJECT_ID }}"
  GAR_LOCATION: europe-west3

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Authentication via credentials json past credentials json into sectrets GCP_CREDENTIALS (in iam create service account and add key + download json file)
      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      - id: "get-credentials"
        uses: "google-github-actions/get-gke-credentials@v2"
        with:
          cluster_name: "sportiqconnect-gke-${{ github.event.inputs.env }}"
          location: "us-central1-c"

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v1"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Setup service account key
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        run: |
          echo "$FIREBASE_SERVICE_ACCOUNT" | base64 --decode > ./backend/src/service-credentials.json

      - name: Deploy to Kubernetes
        run: |
          cd ./kubernetes
          kubectl apply -f ingress-controller-${{ github.event.inputs.env }}.yaml
          kubectl apply -f tls-ingress-${{ github.event.inputs.env }}.yaml
          kubectl apply -f ./auth-service/auth-deployment.yaml
          kubectl apply -f ./auth-service/auth-service.yaml
          kubectl apply -f ./administration-service/administration-deployment.yaml
          kubectl apply -f ./administration-service/administration-service.yaml
          kubectl apply -f ./report-service/report-deployment.yaml
          kubectl apply -f ./report-service/report-service.yaml
          kubectl apply -f frontend-deployment.yaml
          kubectl apply -f frontend-service.yaml
          kubectl get all

          kubectl set image deployment/auth-deployment auth=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-project-registry/cloud-project-auth:${{ github.event.inputs.version }}
          kubectl set image deployment/administration-deployment administration=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-project-registry/cloud-project-administration:${{ github.event.inputs.version }}
          kubectl set image deployment/report-deployment report=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-project-registry/cloud-project-report:${{ github.event.inputs.version }}
          kubectl set image deployment/frontend-deployment frontend=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/cloud-project-registry/cloud-project-frontend:${{ github.event.inputs.version }}
